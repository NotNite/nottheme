---
import type { Settings, Value } from "./types";

interface Props {
  settings: Settings;
}

const { settings } = Astro.props;

let str = "";
let root = "";
let mediaQueries: Record<string, string> = {};
let classes: Record<string, string> = {};

function doChoice(values: Record<string, Value>, indent: number = 2): string {
  let style = "";
  let indentStr = indent > 0 ? " ".repeat(indent) : "";
  for (const [property, value] of Object.entries(values)) {
    style += `${indentStr}${property}: ${value};\n`;
  }
  return style.trimEnd();
}

for (const [optionName, option] of Object.entries(settings.options)) {
  // Compute the default properties
  if (typeof option.default === "string") {
    const choice = option.values[option.default];
    root += `${doChoice(choice)}\n`;
  } else {
    for (const defaultEntry of option.default) {
      if (typeof defaultEntry === "string") {
        const choice = option.values[defaultEntry];
        root += `${doChoice(choice)}\n`;
      } else {
        const query = defaultEntry.query;
        if (!mediaQueries[query]) mediaQueries[query] = "";
        const choice = option.values[defaultEntry.choice];
        mediaQueries[query] += `${doChoice(choice, 4)}\n`;
      }
    }
  }

  // Compute the normal classes
  for (const [choiceName, values] of Object.entries(option.values)) {
    const className = `.${optionName}-${choiceName}`;
    const input = `.nottheme:has(option[id="nottheme__noscript__${optionName}__${choiceName}"]:checked)`;
    let style = `${className}, ${input} {\n`;

    for (const [property, value] of Object.entries(values)) {
      style += `  ${property}: ${value};\n`;
    }

    style += "}\n";
    classes[className] = style;
  }
}

// Render root
const rootQuery = "body.nottheme";
str += `${rootQuery} {
${root.trimEnd()}
}
`;

// Render media queries
for (const [query, styles] of Object.entries(mediaQueries)) {
  str += `
@media ${query} {
  ${rootQuery} {
${styles.trimEnd()}
  }
}
`;
}

// Render classes
for (const style of Object.values(classes)) {
  str += `\n${style}`;
}
---

<style is:global set:html={str}></style>
