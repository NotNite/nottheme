---
import type { Settings } from "./types";

type SlimSettings = Record<
  string,
  {
    c: string[];
    d: string | (string | [string, string])[];
  }
>;

interface Props {
  settings: Settings;
}

const { settings } = Astro.props;
const slimSettings: SlimSettings = {};
for (const [key, value] of Object.entries(settings.options)) {
  slimSettings[key] = {
    c: value.choices,
    d:
      typeof value.default === "string"
        ? value.default
        : value.default.map((d) => {
            if (typeof d === "string") {
              return d;
            } else {
              return [d.query, d.choice];
            }
          })
  };
}
const settingsJson = JSON.stringify(slimSettings);
// Really don't like how that script has to be inline... ugh
---

<script defer is:inline data-settings={settingsJson}>
  const settings = JSON.parse(document.currentScript.dataset.settings);

  window.__nottheme_computeDefault = (option) => {
    if (typeof option.d === "string") {
      return option.d;
    } else {
      for (const defaultEntry of option.d) {
        if (typeof defaultEntry === "string") {
          return defaultEntry;
        } else {
          const [query, choice] = defaultEntry;
          if (window.matchMedia(query).matches) {
            return choice;
          }
        }
      }
    }
  };

  const prefix = "nottheme-";
  window.__nottheme_get = (key) => {
    const localStorageKey = prefix + key;
    const value = window.localStorage.getItem(localStorageKey);
    if (value) return value;

    const option = window.__nottheme_computeDefault(settings[key]);
    window.localStorage.setItem(localStorageKey, option);
    return option;
  };

  window.__nottheme_set = (key, value) => {
    const localStorageKey = prefix + key;

    const classList = document.body.classList;
    for (const className of classList) {
      if (className.startsWith(key + "-")) {
        classList.remove(className);
      }
    }
    classList.add(key + "-" + value);

    window.localStorage.setItem(localStorageKey, value);
    if (window.__nottheme_onChange) window.__nottheme_onChange(key, value);
  };

  function init() {
    document.body.classList.remove("nottheme");
    for (const group of Object.keys(settings)) {
      const value = window.__nottheme_get(group);
      const choices = settings[group].c;
      if (!choices.includes(value)) {
        window.__nottheme_set(
          group,
          window.__nottheme_computeDefault(settings[group])
        );
      } else {
        window.__nottheme_set(group, value);
      }
    }
  }

  function setLoaded() {
    if (!document.body.classList.contains("nottheme-loaded")) {
      document.body.classList.add("nottheme-loaded");
    }
  }

  function register() {
    const selects = document.querySelectorAll(
      ".nottheme-theming-script select"
    );

    for (const selected of selects) {
      selected.addEventListener("change", () => {
        const option = selected.options[selected.selectedIndex];
        const id = option.id;
        const [_, __, key, theme] = id.split("__");
        window.__nottheme_set(key, theme);
      });

      const options = selected.options;
      for (const option of options) {
        const key = option.id.split("__")[2];
        const theme = option.value;

        if (window.__nottheme_get(key) === theme) {
          option.selected = true;
        }
      }
    }
  }

  init();

  document.addEventListener("DOMContentLoaded", register);
  window.addEventListener("load", setLoaded);
  document.addEventListener("astro:after-swap", () => {
    // Astro remakes the DOM on navigation
    init();
    register();
    setLoaded();
  });
</script>
